# Скопируйте решение из предыдущей задачи(Maze-1) и адаптируйте под текущий лабиринт
# Чем меньше пришлось вносить изменений в код программы, тем лучше было решение предыдущей задачи


# Решите задачу и выведите ответ в нужном формате
def dfs(graph, start):
    visited = [False] * len(graph)

    def _dfs(v):
        visited[v] = True
        for w in graph[v]:
            if not visited[w]:  # посещён ли текущий сосед?
                _dfs(w)

    _dfs(start)
    return visited

# Выверите и скопируйте сюда наиболее подходяший алгоритм для работы с графом(bfs/dfs)

# Опишите список смежности по изображению лабиринта из файла task.md
graph = [
    [1], #0
    [0, 2], #1
    [1, 3], #2
    [2, 7], #3
    [5], #4
    [4, 6], #5
    [5], #6
    [3, 11], #7
    [9, 12], #8
    [8, 10], #9
    [9, 11], #10
    [7, 10, 15], #11
    [8, 13], #12
    [12, 14], #13
    [13], #14
    [11] #15
]
# Решите задачу и выведите ответ в нужном формате

start_points = {
    'S-1': 1,
    'S-2': 5,
    'S-3': 15
}

finish_point = 14
for name, start in start_points.items():
    if dfs(graph, start)[finish_point] == True:
        print(f"Из точки {name} можно дойти до финиша")
    else:
        print(f"Из точки {name} нельзя дойти до финиша")
