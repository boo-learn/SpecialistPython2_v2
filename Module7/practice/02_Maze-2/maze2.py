# DFS(Depth-First Search) - поиск в глубину
# Позволяет построить обход ориентированного или неориентированного графа,
# при котором посещаются все вершины, доступные из начальной вершины.

# Алгоритм обхода в глубину:
# 1. Пойти в какую-нибудь смежную вершину, не посещенную ранее.
# 2. Запустить из этой вершины алгоритм обхода в глубину
# 3. Вернуться в начальную вершину.
# 4. Повторить пункты 1-3 для всех не посещенных ранее смежных вершин.

#         3 --5--2   6--7
#        / \ /  /
#       0---1--4

def dfs(graph, start):
    visited = [False] * len(graph)

    def _dfs(v):
        visited[v] = True
        for w in graph[v]:
            if not visited[w]:  # посещён ли текущий сосед?
                _dfs(w)

    _dfs(start)
    return visited

def main():
    graph = [
        # список смежности
        [1],  # 0
        [0, 2],  # 1
        [1, 3],  # 2
        [7, 2],  # 3
        [5],  # 4
        [4, 6],  # 5
        [5],  # 6
        [3, 11],  # 7
        [12, 9],  # 8
        [8, 10],  # 9
        [9, 11],  # 10
        [7, 10, 15],  # 11
        [8, 13],  # 12
        [12, 14],  # 13
        [13],  # 14
        [11]  # 15
    ]

    start = {'s-1': 1, 's-2': 5, 's-3': 15}
    for i in start:
        visited = dfs(graph, start[i])
        if visited[14]:
            print(f'Из точки {i} можно дойти до финиша')
            continue
        print(f'Из точки {i} нельзя дойти до финиша')

main()
