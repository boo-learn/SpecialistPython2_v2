# "Лабиринт"
# см. Картинку на гугло-диске в Модуле-7
# P-1, P-2 … - точки старта
# Определите: Из каких точек можно дойти до выхода(F), а из каких нет

# Сюда отправляем полное решение


# DFS(Depth-First Search) - поиск в глубину
# Позволяет построить обход ориентированного или неориентированного графа,
# при котором посещаются все вершины, доступные из начальной вершины.

# Алгоритм обхода в глубину:
# 1. Пойти в какую-нибудь смежную вершину, не посещенную ранее.
# 2. Запустить из этой вершины алгоритм обхода в глубину
# 3. Вернуться в начальную вершину.
# 4. Повторить пункты 1-3 для всех не посещенных ранее смежных вершин.

#         3 --5--2   6--7
#        / \ /  /
#       0---1--4
graph = [
    # список смежности
    [1],  # 0
    [2, 4, 5],  # 1
    [2, 4],  # 2
    [2],  # 3
    [5, 6, 1],  # 4
    [4],  # 5
    [7, 8],  # 6
    [6],  # 7
    [6],  # 8
    [10], # 9
]

visited = [False] * (len(graph))
# prev = [None] * (len(graph))
start = 6
a = str("Из точки S-1 можно дойти до финиша")

def dfs(v):
    visited[v] = True
    for w in graph[v]:
        if not visited[w]:  # посещён ли текущий сосед?
            dfs(w)


dfs(start)

print(a, visited)
