# Выверите и скопируйте сюда наиболее подходяший алгоритм для работы с графом(bfs/dfs)

# Опишите список смежности по изображению лабиринта из файла task.md
graph = [
    # список смежности
    [1],   # 0
    [0, 5],   # 1
    [6],   # 2
    [7],   # 3
    [5, 8],   # 4
    [1, 4],   # 5
    [2, 10],   # 6
    [3],   # 7
    [4, 9, 12],   # 8
    [8, 10],   # 9
    [6, 9, 11, 14],   # 10
    [10],   # 11
    [8],   # 12
    [],   # 13
    [10, 15],   # 14
    [14]   # 15
]

def dfs(v):
    visited[v] = True
    for w in graph[v]:
        if not visited[w]:  # посещён ли текущий сосед?
            dfs(w)

starts = [0, 3, 12]
end = 14
for i in starts:
    visited = [False] * (len(graph))
    dfs(i)
    if visited[end]:
        msg = f'Из точки S-{i} можно дойти до финиша'
    else:
        msg = f'Из точки S-{i} нельзя дойти до финиша'
    visited = [False] * (len(graph))
    print(msg)

# Решите задачу и выведите ответ в нужном формате
